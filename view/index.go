// Code generated by go-bindata.
// sources:
// view/index.html
// DO NOT EDIT!

package view

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcf\x6f\xd4\x46\x14\xbe\x23\xf1\x3f\xb8\x73\x6a\x2b\x56\x3b\xf6\x8c\xed\x99\x6a\xed\x43\xa1\x48\x95\x2a\x95\x03\x3d\xf4\x54\xcd\x8f\x37\xc4\x65\xd7\x1b\xed\x3a\x81\xed\x29\x54\x54\x25\x84\x90\x1c\x28\x29\x69\x69\x49\x4b\x0b\xa5\x52\x20\xfd\x95\xb0\x59\xc2\x3f\x63\x7b\x93\x13\xff\x42\x65\x6f\x52\x92\x28\x9b\xec\x56\xe2\x90\x58\x9e\x37\xef\x9b\xef\xfb\xc6\xf3\xde\x6c\xed\xad\x73\x1f\x9f\xbd\xf8\xe9\x85\x0f\xac\x89\xa4\x51\x0f\x4f\x9f\xaa\x15\x4f\xab\x2e\xe2\x4b\x01\x82\x18\x95\x23\x20\x74\x78\xfa\x94\x65\x59\x56\x2d\x89\x92\x3a\x84\xdb\xb7\xd7\xb3\x85\xbb\xe9\xcb\x95\xfc\xda\xd3\x5a\x75\x30\xb6\x3b\xa1\x01\x89\xb0\xd4\x84\x68\xb5\x21\x09\xd0\x27\x17\xcf\x57\x18\xb2\x62\xd1\x80\x00\x4d\x47\x70\x65\xb2\xd9\x4a\x90\xa5\x9a\x71\x02\x71\x12\xa0\x2b\x91\x4e\x26\x02\x0d\xd3\x91\x82\x4a\xf9\x72\xc6\x8a\xe2\x28\x89\x44\xbd\xd2\x56\xa2\x0e\x81\x7d\xc6\x6a\x4f\xb4\xa2\xf8\x72\x25\x69\x56\x4c\x94\x04\x71\xb3\x24\x55\xdd\x65\x55\x93\x4d\xdd\x29\x9e\x3a\x9a\xb6\x54\x5d\xb4\xdb\x01\xda\x85\x47\x7b\x9c\x4c\xb3\xd5\xb0\x84\x4a\xa2\x66\x1c\xa0\x6a\x14\x9b\xe6\x5e\xa8\x0c\xb7\x27\x45\x1c\xa6\xdd\xb9\xec\xe6\x4a\x3e\x3b\x93\x2d\xce\xf7\x1f\x3d\x7b\xd5\x5b\xae\x55\xcb\xc0\xbe\x89\x51\x3c\x39\x95\xec\x8a\x29\xfe\x23\x2b\xe9\x4c\x42\x80\x12\xb8\x5a\x88\x1a\x2c\x5e\x4e\x22\xc8\x6a\x47\x5f\x40\x80\x1c\x8c\xac\x86\xb8\x5a\x87\xf8\x52\x32\x11\x20\x82\x91\x35\x2d\xea\x53\x10\x20\x14\xd6\x64\xab\xfc\x3b\x4c\xa5\xbf\xf9\x63\xba\x31\xd3\x7f\xb8\x95\xf6\x96\xd3\x97\x2b\xfd\x3b\x8f\xd3\xcd\x9f\xfb\x0f\xae\x9d\xc8\x49\xb5\x40\x47\xc9\xd9\xa6\x7e\x53\xcc\x0a\x7b\xd6\x7e\xc8\x6e\x75\xb3\xdb\x2f\x8f\x64\xd3\x86\x3a\xa8\x3d\x3a\x9f\x4f\xb5\x93\x48\xc1\xfb\x53\x2d\x10\x53\x1f\xea\xc3\x3c\xf6\xe5\x95\xb9\xcd\xc9\x62\x83\x5e\x93\xd8\x7e\xba\xbe\x33\x33\x9b\xcf\xfd\xb6\x7f\xd5\x5a\x75\x30\x2d\x3c\x7d\xea\xd8\x74\x9f\x6b\xa2\x5c\x47\xfb\x46\x08\xea\x78\x52\x3a\x5a\x4a\x86\x3d\x90\x54\x6a\xdf\x36\x28\xcc\xd7\xd7\xb2\xef\xff\xcc\x36\xbe\x1c\x15\xd2\xc3\x42\xdb\x3e\xa6\x1e\x77\x39\x55\xd2\x63\x9a\x69\xca\x3d\xe3\x52\xe1\x2a\x4a\x14\x0a\xfb\x2f\x96\xf2\xe7\x77\xb3\x5b\xdd\x51\x21\x81\xb8\xbe\xe7\x63\x46\x04\x77\xa9\x96\x20\xc0\x60\x6d\x3c\xe1\x03\xf5\x5d\x90\x1c\x85\xfd\x5f\x17\xfa\x77\x9e\x8d\x01\x29\x95\x2f\x6c\x8f\x73\x49\x99\x4f\x5d\x42\x18\xf1\x88\x36\x9e\x83\x3d\xe6\x51\x4e\x5d\x14\x66\xf3\x4b\xd9\xda\xda\x18\x90\x98\xb9\xcc\xb7\x7d\x61\x3c\xc5\x29\x57\x5c\x3a\x54\xdb\xda\x71\x40\x62\x0d\x2e\xd7\x28\xdc\xd9\xba\x97\xfd\xb1\x34\x06\xa4\x71\x85\x22\x0e\x78\xca\x50\x49\x5d\xec\x08\x5f\x39\x9c\xf8\x58\x71\x4c\x25\xe5\x06\x85\xfd\xef\x16\xc7\x13\xee\x52\x6d\x1b\xc5\xc0\x05\x60\x54\x38\x98\x53\xcd\x05\xe3\x3e\xf8\x98\x69\xd0\x3e\x0a\xb3\xd5\xfb\xd9\xea\xec\x38\xc2\x8d\xa1\x06\x3c\x03\xd2\x31\xd4\x73\x84\xf0\xb9\xab\x14\x30\x5b\x3b\x9a\x13\x6a\x50\x98\x7d\x35\x9b\x7f\x7b\x7b\x0c\x48\x41\xa8\xa3\x14\xe3\xb6\x67\x17\x3b\x6e\x73\x5c\xbc\xf9\x94\x0b\x6c\x1b\xed\x14\x2c\xef\x3f\x19\x6f\x7b\x1c\xc7\x17\x54\x11\xc5\x14\xd6\x54\xba\x46\x62\xc7\x67\x8c\x48\xc1\xb1\x11\x36\x23\x28\xcc\x1e\x3e\xda\x79\xbe\x90\xdf\x1d\xeb\x3b\xb2\x85\xa7\x5d\x6a\x73\x61\x3b\x14\xb0\xe1\x3e\x07\x06\x5c\x30\x26\x8c\xe7\x31\x33\xd8\xf4\xf9\x71\xb4\x6b\xdf\xe5\xc6\xd5\x8c\x19\xe1\x51\xe2\x2a\xa1\x89\xaf\x35\x73\x18\x73\x8d\xc7\xa0\xb0\x73\x76\x3e\xff\x7b\x7d\x18\x64\xad\x3a\x28\x2f\xfb\xca\xd3\xe1\x02\xb5\xbd\xba\xd5\xff\x7d\x2e\x5f\xfa\x67\x67\xe9\xaf\x57\xbd\x5b\xfd\x3b\x6b\x27\x16\x4d\x09\x97\xa2\xf8\x42\xab\x68\x0f\x0a\x3e\x8a\x14\xc4\x6d\x38\x27\x12\x40\x56\xa4\x03\xf4\xd9\xf0\xf0\xd0\x0a\x6b\x4d\x88\x76\x31\x65\x32\x52\x97\xa1\x85\x0e\x7a\x62\x59\x47\xd7\x5f\x67\x7f\xfd\x1d\xa8\xb1\xda\x49\xa7\x5e\x94\xf5\x66\xbd\xd9\x7a\xcf\x6a\x81\x46\xe1\xdb\xef\x0e\xc4\xe5\x0f\x7a\x59\x6f\xe1\x55\x6f\xb9\xd3\xe9\x74\x2a\x8d\x46\x45\xeb\x77\x76\x75\x0e\x77\x27\xbb\x71\x72\x5f\x83\x58\x0f\x37\x63\x58\xf0\x0d\x5a\x31\xbc\x49\x5e\xef\x6f\x7e\x9d\xbd\xf8\x29\xeb\x2d\x9c\xd0\x87\xea\xe2\xca\xf9\xa8\xd5\xb8\xd8\x99\x84\xff\xdd\x83\x0e\x2e\x37\x62\x45\xe2\x8e\x61\x9e\x60\xae\xe0\x92\x4a\xa2\x39\x03\xa7\x3c\xf3\x86\x08\xe0\x44\xa2\x30\xbf\xb7\xba\x33\xb3\x9c\x2d\xde\x48\x7b\xf7\x46\x3e\xee\xc4\x95\x12\x7c\x49\x29\x08\x0a\x92\x30\x1b\x98\xed\x81\x4f\x89\x67\x98\x30\x02\x85\xe9\xc6\x93\xb4\x3b\xf2\x11\x3a\xf4\x89\x6c\xcd\x65\x1b\x37\xd2\x6e\x37\xff\xe6\xd9\x09\xb6\x96\xf7\xb3\x23\x0c\x1d\xd5\xd2\x6c\x6b\x2e\x9f\x9d\xd9\x7e\x74\x3d\x7f\xbc\xb2\x8f\xec\x31\xc9\x18\x85\x36\x4e\xbb\xdd\x74\xf3\x97\x74\x63\x6e\xb4\x1c\xbb\x4c\xaa\x38\xf8\xa0\x25\xc7\x19\x8c\x51\xe8\xe0\x0a\x19\x3d\x83\x60\x14\x12\x5c\x71\x47\xcf\x70\x31\x0a\x5d\x5c\xb1\xf1\xe8\x29\x36\x2e\x95\xfc\xa7\xff\xe6\x11\x69\xc7\x6d\xaf\x8e\xa6\x0f\x2f\x20\xa7\x92\xa4\x19\xef\x9e\xde\xf6\x94\x6c\x44\x09\x0a\xf3\x85\xc5\xb4\xfb\xb0\x56\x1d\x04\x0f\x80\xbf\x86\xa8\x55\x8b\x3b\x75\x79\x0f\x1f\x0c\xd6\xaa\x7b\xf7\xf0\x6a\xf9\x43\xe2\xdf\x00\x00\x00\xff\xff\x5b\x2f\x7f\xb3\x58\x0c\x00\x00")

func viewIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewIndexHtml,
		"view/index.html",
	)
}

func viewIndexHtml() (*asset, error) {
	bytes, err := viewIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/index.html", size: 3160, mode: os.FileMode(438), modTime: time.Unix(1579677059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/index.html": viewIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{viewIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

